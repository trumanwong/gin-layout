// Code generated by protoc-gen-go-gin-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/trumanwong/gin-transport/transport/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the gin package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsUnknownError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == AppServiceErrorReason_UNKNOWN_ERROR.String() && e.Code == 400
}

func ErrorUnknownError(format string, args ...interface{}) *errors.Error {
	return errors.New(400, AppServiceErrorReason_UNKNOWN_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsBadRequest(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == AppServiceErrorReason_BAD_REQUEST.String() && e.Code == 400
}

func ErrorBadRequest(format string, args ...interface{}) *errors.Error {
	return errors.New(400, AppServiceErrorReason_BAD_REQUEST.String(), fmt.Sprintf(format, args...))
}

func IsLoginFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == AppServiceErrorReason_LOGIN_FAILED.String() && e.Code == 401
}

func ErrorLoginFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(401, AppServiceErrorReason_LOGIN_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsForbidden(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == AppServiceErrorReason_FORBIDDEN.String() && e.Code == 403
}

func ErrorForbidden(format string, args ...interface{}) *errors.Error {
	return errors.New(403, AppServiceErrorReason_FORBIDDEN.String(), fmt.Sprintf(format, args...))
}

func IsNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == AppServiceErrorReason_NotFound.String() && e.Code == 404
}

func ErrorNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, AppServiceErrorReason_NotFound.String(), fmt.Sprintf(format, args...))
}

func IsNotAcceptable(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == AppServiceErrorReason_NotAcceptable.String() && e.Code == 406
}

func ErrorNotAcceptable(format string, args ...interface{}) *errors.Error {
	return errors.New(406, AppServiceErrorReason_NotAcceptable.String(), fmt.Sprintf(format, args...))
}

func IsConflict(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == AppServiceErrorReason_Conflict.String() && e.Code == 409
}

func ErrorConflict(format string, args ...interface{}) *errors.Error {
	return errors.New(409, AppServiceErrorReason_Conflict.String(), fmt.Sprintf(format, args...))
}

func IsInternal(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == AppServiceErrorReason_Internal.String() && e.Code == 500
}

func ErrorInternal(format string, args ...interface{}) *errors.Error {
	return errors.New(500, AppServiceErrorReason_Internal.String(), fmt.Sprintf(format, args...))
}
