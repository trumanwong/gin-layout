// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gin-layout/internal/data/ent/greeterexample"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GreeterExampleCreate is the builder for creating a GreeterExample entity.
type GreeterExampleCreate struct {
	config
	mutation *GreeterExampleMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (gec *GreeterExampleCreate) SetCreatedAt(t time.Time) *GreeterExampleCreate {
	gec.mutation.SetCreatedAt(t)
	return gec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gec *GreeterExampleCreate) SetNillableCreatedAt(t *time.Time) *GreeterExampleCreate {
	if t != nil {
		gec.SetCreatedAt(*t)
	}
	return gec
}

// SetUpdatedAt sets the "updated_at" field.
func (gec *GreeterExampleCreate) SetUpdatedAt(t time.Time) *GreeterExampleCreate {
	gec.mutation.SetUpdatedAt(t)
	return gec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (gec *GreeterExampleCreate) SetNillableUpdatedAt(t *time.Time) *GreeterExampleCreate {
	if t != nil {
		gec.SetUpdatedAt(*t)
	}
	return gec
}

// SetDeletedAt sets the "deleted_at" field.
func (gec *GreeterExampleCreate) SetDeletedAt(t time.Time) *GreeterExampleCreate {
	gec.mutation.SetDeletedAt(t)
	return gec
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gec *GreeterExampleCreate) SetNillableDeletedAt(t *time.Time) *GreeterExampleCreate {
	if t != nil {
		gec.SetDeletedAt(*t)
	}
	return gec
}

// Mutation returns the GreeterExampleMutation object of the builder.
func (gec *GreeterExampleCreate) Mutation() *GreeterExampleMutation {
	return gec.mutation
}

// Save creates the GreeterExample in the database.
func (gec *GreeterExampleCreate) Save(ctx context.Context) (*GreeterExample, error) {
	if err := gec.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, gec.sqlSave, gec.mutation, gec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gec *GreeterExampleCreate) SaveX(ctx context.Context) *GreeterExample {
	v, err := gec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gec *GreeterExampleCreate) Exec(ctx context.Context) error {
	_, err := gec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gec *GreeterExampleCreate) ExecX(ctx context.Context) {
	if err := gec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gec *GreeterExampleCreate) defaults() error {
	if _, ok := gec.mutation.CreatedAt(); !ok {
		if greeterexample.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized greeterexample.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := greeterexample.DefaultCreatedAt()
		gec.mutation.SetCreatedAt(v)
	}
	if _, ok := gec.mutation.UpdatedAt(); !ok {
		if greeterexample.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized greeterexample.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := greeterexample.DefaultUpdatedAt()
		gec.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (gec *GreeterExampleCreate) check() error {
	if _, ok := gec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "GreeterExample.created_at"`)}
	}
	if _, ok := gec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "GreeterExample.updated_at"`)}
	}
	return nil
}

func (gec *GreeterExampleCreate) sqlSave(ctx context.Context) (*GreeterExample, error) {
	if err := gec.check(); err != nil {
		return nil, err
	}
	_node, _spec := gec.createSpec()
	if err := sqlgraph.CreateNode(ctx, gec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	gec.mutation.id = &_node.ID
	gec.mutation.done = true
	return _node, nil
}

func (gec *GreeterExampleCreate) createSpec() (*GreeterExample, *sqlgraph.CreateSpec) {
	var (
		_node = &GreeterExample{config: gec.config}
		_spec = sqlgraph.NewCreateSpec(greeterexample.Table, sqlgraph.NewFieldSpec(greeterexample.FieldID, field.TypeInt))
	)
	if value, ok := gec.mutation.CreatedAt(); ok {
		_spec.SetField(greeterexample.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := gec.mutation.UpdatedAt(); ok {
		_spec.SetField(greeterexample.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := gec.mutation.DeletedAt(); ok {
		_spec.SetField(greeterexample.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	return _node, _spec
}

// GreeterExampleCreateBulk is the builder for creating many GreeterExample entities in bulk.
type GreeterExampleCreateBulk struct {
	config
	err      error
	builders []*GreeterExampleCreate
}

// Save creates the GreeterExample entities in the database.
func (gecb *GreeterExampleCreateBulk) Save(ctx context.Context) ([]*GreeterExample, error) {
	if gecb.err != nil {
		return nil, gecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gecb.builders))
	nodes := make([]*GreeterExample, len(gecb.builders))
	mutators := make([]Mutator, len(gecb.builders))
	for i := range gecb.builders {
		func(i int, root context.Context) {
			builder := gecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GreeterExampleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gecb *GreeterExampleCreateBulk) SaveX(ctx context.Context) []*GreeterExample {
	v, err := gecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gecb *GreeterExampleCreateBulk) Exec(ctx context.Context) error {
	_, err := gecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gecb *GreeterExampleCreateBulk) ExecX(ctx context.Context) {
	if err := gecb.Exec(ctx); err != nil {
		panic(err)
	}
}
