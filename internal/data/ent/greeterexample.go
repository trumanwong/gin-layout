// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"gin-layout/internal/data/ent/greeterexample"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// GreeterExample is the model entity for the GreeterExample schema.
type GreeterExample struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt    time.Time `json:"deleted_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GreeterExample) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case greeterexample.FieldID:
			values[i] = new(sql.NullInt64)
		case greeterexample.FieldCreatedAt, greeterexample.FieldUpdatedAt, greeterexample.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GreeterExample fields.
func (ge *GreeterExample) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case greeterexample.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ge.ID = int(value.Int64)
		case greeterexample.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ge.CreatedAt = value.Time
			}
		case greeterexample.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ge.UpdatedAt = value.Time
			}
		case greeterexample.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ge.DeletedAt = value.Time
			}
		default:
			ge.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GreeterExample.
// This includes values selected through modifiers, order, etc.
func (ge *GreeterExample) Value(name string) (ent.Value, error) {
	return ge.selectValues.Get(name)
}

// Update returns a builder for updating this GreeterExample.
// Note that you need to call GreeterExample.Unwrap() before calling this method if this GreeterExample
// was returned from a transaction, and the transaction was committed or rolled back.
func (ge *GreeterExample) Update() *GreeterExampleUpdateOne {
	return NewGreeterExampleClient(ge.config).UpdateOne(ge)
}

// Unwrap unwraps the GreeterExample entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ge *GreeterExample) Unwrap() *GreeterExample {
	_tx, ok := ge.config.driver.(*txDriver)
	if !ok {
		panic("ent: GreeterExample is not a transactional entity")
	}
	ge.config.driver = _tx.drv
	return ge
}

// String implements the fmt.Stringer.
func (ge *GreeterExample) String() string {
	var builder strings.Builder
	builder.WriteString("GreeterExample(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ge.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ge.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ge.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(ge.DeletedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// GreeterExamples is a parsable slice of GreeterExample.
type GreeterExamples []*GreeterExample
