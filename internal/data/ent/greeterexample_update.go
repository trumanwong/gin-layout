// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gin-layout/internal/data/ent/greeterexample"
	"gin-layout/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GreeterExampleUpdate is the builder for updating GreeterExample entities.
type GreeterExampleUpdate struct {
	config
	hooks     []Hook
	mutation  *GreeterExampleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the GreeterExampleUpdate builder.
func (geu *GreeterExampleUpdate) Where(ps ...predicate.GreeterExample) *GreeterExampleUpdate {
	geu.mutation.Where(ps...)
	return geu
}

// SetUpdatedAt sets the "updated_at" field.
func (geu *GreeterExampleUpdate) SetUpdatedAt(t time.Time) *GreeterExampleUpdate {
	geu.mutation.SetUpdatedAt(t)
	return geu
}

// SetDeletedAt sets the "deleted_at" field.
func (geu *GreeterExampleUpdate) SetDeletedAt(t time.Time) *GreeterExampleUpdate {
	geu.mutation.SetDeletedAt(t)
	return geu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (geu *GreeterExampleUpdate) SetNillableDeletedAt(t *time.Time) *GreeterExampleUpdate {
	if t != nil {
		geu.SetDeletedAt(*t)
	}
	return geu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (geu *GreeterExampleUpdate) ClearDeletedAt() *GreeterExampleUpdate {
	geu.mutation.ClearDeletedAt()
	return geu
}

// Mutation returns the GreeterExampleMutation object of the builder.
func (geu *GreeterExampleUpdate) Mutation() *GreeterExampleMutation {
	return geu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (geu *GreeterExampleUpdate) Save(ctx context.Context) (int, error) {
	if err := geu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, geu.sqlSave, geu.mutation, geu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (geu *GreeterExampleUpdate) SaveX(ctx context.Context) int {
	affected, err := geu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (geu *GreeterExampleUpdate) Exec(ctx context.Context) error {
	_, err := geu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (geu *GreeterExampleUpdate) ExecX(ctx context.Context) {
	if err := geu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (geu *GreeterExampleUpdate) defaults() error {
	if _, ok := geu.mutation.UpdatedAt(); !ok {
		if greeterexample.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized greeterexample.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := greeterexample.UpdateDefaultUpdatedAt()
		geu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (geu *GreeterExampleUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GreeterExampleUpdate {
	geu.modifiers = append(geu.modifiers, modifiers...)
	return geu
}

func (geu *GreeterExampleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(greeterexample.Table, greeterexample.Columns, sqlgraph.NewFieldSpec(greeterexample.FieldID, field.TypeInt))
	if ps := geu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := geu.mutation.UpdatedAt(); ok {
		_spec.SetField(greeterexample.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := geu.mutation.DeletedAt(); ok {
		_spec.SetField(greeterexample.FieldDeletedAt, field.TypeTime, value)
	}
	if geu.mutation.DeletedAtCleared() {
		_spec.ClearField(greeterexample.FieldDeletedAt, field.TypeTime)
	}
	_spec.AddModifiers(geu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, geu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{greeterexample.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	geu.mutation.done = true
	return n, nil
}

// GreeterExampleUpdateOne is the builder for updating a single GreeterExample entity.
type GreeterExampleUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *GreeterExampleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (geuo *GreeterExampleUpdateOne) SetUpdatedAt(t time.Time) *GreeterExampleUpdateOne {
	geuo.mutation.SetUpdatedAt(t)
	return geuo
}

// SetDeletedAt sets the "deleted_at" field.
func (geuo *GreeterExampleUpdateOne) SetDeletedAt(t time.Time) *GreeterExampleUpdateOne {
	geuo.mutation.SetDeletedAt(t)
	return geuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (geuo *GreeterExampleUpdateOne) SetNillableDeletedAt(t *time.Time) *GreeterExampleUpdateOne {
	if t != nil {
		geuo.SetDeletedAt(*t)
	}
	return geuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (geuo *GreeterExampleUpdateOne) ClearDeletedAt() *GreeterExampleUpdateOne {
	geuo.mutation.ClearDeletedAt()
	return geuo
}

// Mutation returns the GreeterExampleMutation object of the builder.
func (geuo *GreeterExampleUpdateOne) Mutation() *GreeterExampleMutation {
	return geuo.mutation
}

// Where appends a list predicates to the GreeterExampleUpdate builder.
func (geuo *GreeterExampleUpdateOne) Where(ps ...predicate.GreeterExample) *GreeterExampleUpdateOne {
	geuo.mutation.Where(ps...)
	return geuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (geuo *GreeterExampleUpdateOne) Select(field string, fields ...string) *GreeterExampleUpdateOne {
	geuo.fields = append([]string{field}, fields...)
	return geuo
}

// Save executes the query and returns the updated GreeterExample entity.
func (geuo *GreeterExampleUpdateOne) Save(ctx context.Context) (*GreeterExample, error) {
	if err := geuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, geuo.sqlSave, geuo.mutation, geuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (geuo *GreeterExampleUpdateOne) SaveX(ctx context.Context) *GreeterExample {
	node, err := geuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (geuo *GreeterExampleUpdateOne) Exec(ctx context.Context) error {
	_, err := geuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (geuo *GreeterExampleUpdateOne) ExecX(ctx context.Context) {
	if err := geuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (geuo *GreeterExampleUpdateOne) defaults() error {
	if _, ok := geuo.mutation.UpdatedAt(); !ok {
		if greeterexample.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized greeterexample.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := greeterexample.UpdateDefaultUpdatedAt()
		geuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (geuo *GreeterExampleUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GreeterExampleUpdateOne {
	geuo.modifiers = append(geuo.modifiers, modifiers...)
	return geuo
}

func (geuo *GreeterExampleUpdateOne) sqlSave(ctx context.Context) (_node *GreeterExample, err error) {
	_spec := sqlgraph.NewUpdateSpec(greeterexample.Table, greeterexample.Columns, sqlgraph.NewFieldSpec(greeterexample.FieldID, field.TypeInt))
	id, ok := geuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GreeterExample.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := geuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, greeterexample.FieldID)
		for _, f := range fields {
			if !greeterexample.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != greeterexample.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := geuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := geuo.mutation.UpdatedAt(); ok {
		_spec.SetField(greeterexample.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := geuo.mutation.DeletedAt(); ok {
		_spec.SetField(greeterexample.FieldDeletedAt, field.TypeTime, value)
	}
	if geuo.mutation.DeletedAtCleared() {
		_spec.ClearField(greeterexample.FieldDeletedAt, field.TypeTime)
	}
	_spec.AddModifiers(geuo.modifiers...)
	_node = &GreeterExample{config: geuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, geuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{greeterexample.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	geuo.mutation.done = true
	return _node, nil
}
